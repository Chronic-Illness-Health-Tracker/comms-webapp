/**
 * OpenAPI definition
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { HealthCondition } from '../model/healthCondition';
import { Patient } from '../model/patient';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class PatientControllerService {

    protected basePath = 'http://localhost:8080';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Add a health condition to a patient
     * 
     * @param body 
     * @param patientId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addHealthCondition(body: HealthCondition, patientId: string, observe?: 'body', reportProgress?: boolean): Observable<Patient>;
    public addHealthCondition(body: HealthCondition, patientId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Patient>>;
    public addHealthCondition(body: HealthCondition, patientId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Patient>>;
    public addHealthCondition(body: HealthCondition, patientId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling addHealthCondition.');
        }

        if (patientId === null || patientId === undefined) {
            throw new Error('Required parameter patientId was null or undefined when calling addHealthCondition.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*',
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<Patient>('put',`${this.basePath}/patient/${encodeURIComponent(String(patientId))}/health-Condition`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Add a health condition to a patient by ID
     * 
     * @param patientId 
     * @param conditionId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addHealthConditionById(patientId: string, conditionId: string, observe?: 'body', reportProgress?: boolean): Observable<Patient>;
    public addHealthConditionById(patientId: string, conditionId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Patient>>;
    public addHealthConditionById(patientId: string, conditionId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Patient>>;
    public addHealthConditionById(patientId: string, conditionId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (patientId === null || patientId === undefined) {
            throw new Error('Required parameter patientId was null or undefined when calling addHealthConditionById.');
        }

        if (conditionId === null || conditionId === undefined) {
            throw new Error('Required parameter conditionId was null or undefined when calling addHealthConditionById.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*',
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Patient>('put',`${this.basePath}/patient/${encodeURIComponent(String(patientId))}/health-Condition/${encodeURIComponent(String(conditionId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Create a new patient
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createPatient(body: Patient, observe?: 'body', reportProgress?: boolean): Observable<Patient>;
    public createPatient(body: Patient, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Patient>>;
    public createPatient(body: Patient, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Patient>>;
    public createPatient(body: Patient, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling createPatient.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*',
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<Patient>('post',`${this.basePath}/patient`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Remove a health condition to a patient
     * 
     * @param patientId 
     * @param conditionId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteHealthCondition(patientId: string, conditionId: string, observe?: 'body', reportProgress?: boolean): Observable<Patient>;
    public deleteHealthCondition(patientId: string, conditionId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Patient>>;
    public deleteHealthCondition(patientId: string, conditionId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Patient>>;
    public deleteHealthCondition(patientId: string, conditionId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (patientId === null || patientId === undefined) {
            throw new Error('Required parameter patientId was null or undefined when calling deleteHealthCondition.');
        }

        if (conditionId === null || conditionId === undefined) {
            throw new Error('Required parameter conditionId was null or undefined when calling deleteHealthCondition.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*',
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Patient>('delete',`${this.basePath}/patient/${encodeURIComponent(String(patientId))}/health-Condition/${encodeURIComponent(String(conditionId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update a patient
     * 
     * @param patientId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deletePatient(patientId: string, observe?: 'body', reportProgress?: boolean): Observable<Patient>;
    public deletePatient(patientId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Patient>>;
    public deletePatient(patientId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Patient>>;
    public deletePatient(patientId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (patientId === null || patientId === undefined) {
            throw new Error('Required parameter patientId was null or undefined when calling deletePatient.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*',
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Patient>('delete',`${this.basePath}/patient/${encodeURIComponent(String(patientId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get a Patient by its ID
     * 
     * @param patientId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getPatient(patientId: string, observe?: 'body', reportProgress?: boolean): Observable<Patient>;
    public getPatient(patientId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Patient>>;
    public getPatient(patientId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Patient>>;
    public getPatient(patientId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (patientId === null || patientId === undefined) {
            throw new Error('Required parameter patientId was null or undefined when calling getPatient.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*',
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Patient>('get',`${this.basePath}/patient/${encodeURIComponent(String(patientId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get all patients that have been linked to a condition
     * 
     * @param conditionId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getPatientsInCondition(conditionId: string, observe?: 'body', reportProgress?: boolean): Observable<Patient>;
    public getPatientsInCondition(conditionId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Patient>>;
    public getPatientsInCondition(conditionId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Patient>>;
    public getPatientsInCondition(conditionId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (conditionId === null || conditionId === undefined) {
            throw new Error('Required parameter conditionId was null or undefined when calling getPatientsInCondition.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*',
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Patient>('get',`${this.basePath}/patient/health-Condition/${encodeURIComponent(String(conditionId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update an existing patient
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updatePatient(body: Patient, observe?: 'body', reportProgress?: boolean): Observable<Patient>;
    public updatePatient(body: Patient, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Patient>>;
    public updatePatient(body: Patient, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Patient>>;
    public updatePatient(body: Patient, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling updatePatient.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*',
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<Patient>('put',`${this.basePath}/patient`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
